What is TypeScript?

TypeScript is a strongly typed, object-oriented, compiled language developed by Microsoft that builds on JavaScript. It is a superset of JavaScript, meaning any JavaScript code is valid TypeScript code, but TypeScript adds features like static typing, interfaces, and object-oriented programming capabilities.

It is designed to help developers write scalable and maintainable applications by catching errors during development rather than at runtime.

Why Use TypeScript?:

Static Typing ‚Äì Helps prevent runtime errors by checking type correctness at compile-time.
Better Code Readability and Maintainability ‚Äì With types, code is easier to understand.
Object-Oriented Features ‚Äì Supports classes, interfaces, and inheritance.
Modern JavaScript Features ‚Äì TypeScript supports ES6/ESNext features like async/await, modules, and destructuring.

Tooling & IDE Support ‚Äì Works well with Visual Studio Code, providing auto-completion, IntelliSense, and refactoring.

Improved Debugging ‚Äì Errors are caught early in development rather than during execution.
How TypeScript Works?

TypeScript compiles to JavaScript using the TypeScript compiler (tsc). The compiled JavaScript can run in any browser or JavaScript runtime.

Installation
To install TypeScript globally:

sh
Copy
Edit
npm install -g typescript
To check the installed version:

sh
Copy
Edit
tsc --version
Basic Syntax of TypeScript
1. Variables with Types
In JavaScript:

js
Copy
Edit
let name = "John";
In TypeScript (with types):

ts
Copy
Edit
let name: string = "John";
let age: number = 30;
let isActive: boolean = true;

2. Functions with Type Annotations

function add(a: number, b: number): number {
    return a + b;
}
a: number, b: number ‚Üí Specifies that a and b must be numbers.
: number ‚Üí Specifies that the function returns a number.

3. Interfaces

Interfaces define the structure of objects.

ts
Copy
Edit
interface Person {
    name: string;
    age: number;
}

let user: Person = { name: "Alice", age: 25 };

4. Classes in TypeScript

class Animal {
    name: string;

    constructor(name: string) {
        this.name = name;
    }

    makeSound(): void {
        console.log("Some generic sound");
    }
}

let dog = new Animal("Dog");
dog.makeSound();

5. Inheritance

class Dog extends Animal {
    bark(): void {
        console.log("Woof Woof!");
    }
}

let myDog = new Dog("Buddy");
myDog.bark();  // Output: Woof Woof!

6. Generics

Generics allow functions and classes to work with different data types.

function identity<T>(arg: T): T {
    return arg;
}

console.log(identity<string>("Hello"));
console.log(identity<number>(100));

Compiling TypeScript to JavaScript
Save your TypeScript code in a .ts file (e.g., script.ts).

Run the following command to compile:

tsc script.ts

This generates a JavaScript file (script.js) that can be executed in a browser or Node.js.


Need for TypeScript :

TypeScript is a superset of JavaScript that adds static typing and additional features to make JavaScript development more robust and maintainable. It is developed and maintained by Microsoft.

TypeScript compiles down to plain JavaScript, which can run on any browser or JavaScript engine.

Why TypeScript? (Need for TypeScript)
JavaScript is a powerful and flexible language, but it has certain limitations, especially for large-scale applications. TypeScript addresses these issues in the following ways:

1. Static Typing (Type Safety)
JavaScript is dynamically typed, meaning types are checked only at runtime, leading to unexpected errors.
TypeScript introduces static typing, allowing developers to specify variable types, catching errors at compile time.
üëâ Example

typescript
Copy
Edit
let num: number = 10;
num = "Hello"; // ‚ùå Error: Type 'string' is not assignable to type 'number'
2. Enhanced Code Readability and Maintainability
With static typing and interfaces, TypeScript makes the code more self-documenting.
It becomes easier to understand the expected types and functions, reducing confusion.
üëâ Example

typescript
Copy
Edit
function add(a: number, b: number): number {
    return a + b;
}
console.log(add(5, "10")); // ‚ùå Type Error
3. Object-Oriented Programming (OOP) Features
TypeScript introduces OOP concepts like interfaces, classes, inheritance, and access modifiers (public, private, protected).
üëâ Example

typescript
Copy
Edit
class Employee {
    private salary: number;

    constructor(salary: number) {
        this.salary = salary;
    }

    getSalary(): number {
        return this.salary;
    }
}

const emp = new Employee(50000);
console.log(emp.getSalary()); // ‚úÖ 50000

4. Optional and Default Parameters

In JavaScript, handling function parameters can be tricky. TypeScript allows defining optional and default parameters.
üëâ Example

function greet(name: string, message: string = "Hello"): string {
    return `${message}, ${name}!`;
}

console.log(greet("John"));         // ‚úÖ Hello, John!
console.log(greet("John", "Hi"));   // ‚úÖ Hi, John!

5. Interfaces and Strong Type Checking
Interfaces define a contract for objects, ensuring they follow a specific structure.
üëâ Example

interface Person {
    name: string;
    age: number;
}

let student: Person = {
    name: "Alice",
    age: 22
};

console.log(student.name); // ‚úÖ Alice

6. Better Tooling and Code Completion

TypeScript provides intellisense (auto-completion), refactoring, and better debugging support in IDEs like VS Code.

7. ECMAScript Feature Support

TypeScript supports modern ES6+ features, such as arrow functions, async/await, destructuring, modules, etc.
It can transpile down to older JavaScript versions for browser compatibility.
üëâ Example

const sum = (a: number, b: number): number => a + b;
console.log(sum(10, 5)); // ‚úÖ 15

8. Catching Errors at Compile-Time Instead of Run-Time

Since JavaScript does not check types, errors may appear only when running the code.

TypeScript detects these errors before execution during compilation.
üëâ Example

let isValid: boolean = true;
isValid = "yes"; // ‚ùå Type Error: Type 'string' is not assignable to type 'boolean'

9. Strong Community and Industry Adoption

Many large-scale applications (like Angular, NestJS) rely on TypeScript.
Major companies like Microsoft, Google, and Facebook use it extensively.


Features of Typescript :

TypeScript is a strongly typed, object-oriented, compiled language that builds on JavaScript by adding static types. It is developed and maintained by Microsoft and helps developers write safer and more maintainable code. Below are the key features of TypeScript explained from scratch.

1. Type Annotations (Static Typing)
TypeScript allows developers to specify types for variables, function parameters, and return values. This helps catch errors at compile time.

Example:
typescript
Copy
Edit
let name: string = "John";
let age: number = 25;
let isDeveloper: boolean = true;
If you try to assign a different type, TypeScript will throw an error:

typescript
Copy
Edit
age = "twenty-five"; // Error: Type 'string' is not assignable to type 'number'.
2. Interfaces
Interfaces define the structure of an object, enforcing a contract that objects must follow.

Example:
typescript
Copy
Edit
interface Person {
  name: string;
  age: number;
}

let user: Person = { name: "Alice", age: 30 };
3. Classes and Object-Oriented Programming (OOP)
TypeScript supports classes, inheritance, access modifiers (public, private, protected), and abstract classes.

Example:
typescript
Copy
Edit
class Animal {
  name: string;

  constructor(name: string) {
    this.name = name;
  }

  makeSound(): void {
    console.log("Animal sound");
  }
}

class Dog extends Animal {
  bark(): void {
    console.log("Woof! Woof!");
  }
}

let dog = new Dog("Buddy");
dog.makeSound(); // Animal sound
dog.bark();      // Woof! Woof!
4. Enums (Enumeration)
Enums allow defining a set of named constants.

Example:
enum Color {
  Red,
  Green,
  Blue
}

let myColor: Color = Color.Green;
console.log(myColor); // Output: 1 (because enums are zero-based)

5. Generics

Generics allow writing reusable components by specifying a type parameter.

Example:
function identity<T>(value: T): T {
  return value;
}

console.log(identity<string>("Hello")); // Output: Hello
console.log(identity<number>(10));      // Output: 10

6. Union and Intersection Types

Union types allow a variable to hold multiple types, while intersection types combine multiple types into one.

Example (Union Type):

let value: string | number;
value = "Hello"; // Valid
value = 100;     // Valid
// value = true; // Error: Type 'boolean' is not assignable to type 'string | number'.

Example (Intersection Type):

interface Employee {
  name: string;
  id: number;
}

interface Manager {
  department: string;
}

type TeamLead = Employee & Manager;

let lead: TeamLead = { name: "John", id: 1, department: "IT" };

7. Modules and Namespaces

TypeScript supports modules to organize and encapsulate code.

Example:

// file: mathUtils.ts
export function add(a: number, b: number): number {
  return a + b;
}

// file: main.ts
import { add } from "./mathUtils";
console.log(add(5, 3)); // Output: 8

8. Type Inference

TypeScript can infer types automatically without explicit annotations.

Example:

let message = "Hello, TypeScript"; // TypeScript infers it as string
// message = 123; // Error: Type 'number' is not assignable to type 'string'.

9. Optional and Default Parameters

TypeScript allows function parameters to be optional (?) and set default values.

Example:

function greet(name: string, greeting: string = "Hello"): string {
  return `${greeting}, ${name}!`;
}

console.log(greet("Alice"));          // Output: Hello, Alice!
console.log(greet("Bob", "Hi"));      // Output: Hi, Bob!

10. Readonly and Private Properties

TypeScript allows defining readonly properties that cannot be changed and private members that are not accessible outside the class.

Example:

class Car {
  readonly model: string;
  private price: number;

  constructor(model: string, price: number) {
    this.model = model;
    this.price = price;
  }

  getPrice(): number {
    return this.price;
  }
}

let car = new Car("Tesla", 50000);
console.log(car.model); // Tesla
// car.model = "BMW"; // Error: Cannot assign to 'model' because it is a read-only property.
11. Decorators (Meta-Programming)
Decorators are used to modify the behavior of classes and methods. They are mostly used in frameworks like Angular.

Example:
function Logger(constructor: Function) {
  console.log("Logging...");
}

@Logger
class Person {
  constructor() {
    console.log("Person created.");
  }
}
12. Promise and Async/Await
TypeScript fully supports asynchronous programming using Promises and async/await.

Example:
function fetchData(): Promise<string> {
  return new Promise((resolve) => {
    setTimeout(() => resolve("Data received"), 2000);
  });
}

async function fetchAndPrint() {
  let data = await fetchData();
  console.log(data);
}

fetchAndPrint();
13. Mapped Types
Mapped types allow creating new types based on existing ones.

Example:
type Person = {
  name: string;
  age: number;
};

type ReadonlyPerson = {
  readonly [K in keyof Person]: Person[K];
};

let user: ReadonlyPerson = { name: "John", age: 25 };
// user.age = 30; // Error: Cannot assign to 'age' because it is a read-only property.
14. Tuple Types
Tuples allow defining arrays with a fixed number of elements and different types.

Example:
let person: [string, number, boolean] = ["Alice", 30, true];
console.log(person[0]); // Alice
15. Strict Mode
TypeScript has a strict mode (strict: true in tsconfig.json), which enforces stricter type checking.

Benefits:
Prevents using null and undefined without handling them.
Forces explicit type annotations.
Improves code quality and safety.


Writing Typescript Programs :


Here are different TypeScript programs covering various concepts from basic to advanced levels.

1. Hello World in TypeScript
console.log("Hello, TypeScript!");
2. Variables and Data Types
let message: string = "Welcome to TypeScript";
let age: number = 25;
let isDeveloper: boolean = true;

console.log(message, age, isDeveloper);
3. Functions with Type Annotations
function addNumbers(a: number, b: number): number {
    return a + b;
}

console.log(addNumbers(5, 10)); // Output: 15
4. Interface and Objects
interface Person {
    name: string;
    age: number;
    isEmployed: boolean;
}

let employee: Person = {
    name: "John",
    age: 30,
    isEmployed: true
};

console.log(employee);
5. Classes and Objects
class Car {
    brand: string;
    model: string;
    year: number;

    constructor(brand: string, model: string, year: number) {
        this.brand = brand;
        this.model = model;
        this.year = year;
    }

    displayCarDetails(): void {
        console.log(`Car: ${this.brand} ${this.model} (${this.year})`);
    }
}

let myCar = new Car("Toyota", "Corolla", 2022);
myCar.displayCarDetails();
6. Enum Type
enum Color {
    Red,
    Green,
    Blue
}

let myColor: Color = Color.Green;
console.log(myColor); // Output: 1
7. Generics
function getItems<T>(items: T[]): T[] {
    return new Array<T>().concat(items);
}

let numberArray = getItems<number>([1, 2, 3, 4]);
let stringArray = getItems<string>(["A", "B", "C"]);

console.log(numberArray, stringArray);
8. Inheritance in TypeScript
class Animal {
    name: string;
    
    constructor(name: string) {
        this.name = name;
    }

    makeSound(): void {
        console.log("Animal sound...");
    }
}

class Dog extends Animal {
    constructor(name: string) {
        super(name);
    }

    makeSound(): void {
        console.log("Bark! Bark!");
    }
}

let myDog = new Dog("Buddy");
myDog.makeSound(); // Output: Bark! Bark!
9. Union and Intersection Types
function printId(id: string | number): void {
    console.log(`ID: ${id}`);
}

printId(101);
printId("ABC123");
10. Type Assertion
let someValue: any = "Hello, TypeScript!";
let strLength: number = (someValue as string).length;

console.log(strLength);
11. Promises in TypeScript
function fetchData(): Promise<string> {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve("Data received!");
        }, 2000);
    });
}

fetchData().then((data) => console.log(data));
12. Async/Await in TypeScript
async function getData() {
    let data = await fetchData();
    console.log(data);
}

getData();
13. Working with Modules
File: mathFunctions.ts

export function add(a: number, b: number): number {
    return a + b;
}
File: main.ts

import { add } from "./mathFunctions";

console.log(add(5, 3)); // Output: 8
14. Read-Only and Optional Properties
interface User {
    readonly id: number;
    name: string;
    age?: number; // Optional property
}

let user1: User = { id: 1, name: "Alice" };
console.log(user1);
15. Mapped Types
type ReadOnly<T> = {
    readonly [P in keyof T]: T[P];
};

interface Product {
    name: string;
    price: number;
}

let readonlyProduct: ReadOnly<Product> = { name: "Laptop", price: 1000 };


Data Types in Typescript :

TypeScript is a statically typed superset of JavaScript, meaning it provides data types to ensure type safety and better code maintainability. Let's explore all the data types available in TypeScript with examples.

1. Primitive Data Types
These are the basic types in TypeScript that hold simple values.

1.1 Number
Represents both integer and floating-point numbers.

let age: number = 30;
let price: number = 99.99;
let hex: number = 0xff; // Hexadecimal
let binary: number = 0b1010; // Binary
let octal: number = 0o744; // Octal

console.log(age, price, hex, binary, octal);
1.2 String
Represents textual data.

let firstName: string = "John";
let message: string = `Hello, ${firstName}`; // Template literals

console.log(message);
1.3 Boolean
Represents true or false values.

let isLoggedIn: boolean = true;
let hasPermission: boolean = false;

console.log(isLoggedIn, hasPermission);
1.4 Null and Undefined
null represents an explicitly empty value.
undefined means a variable has been declared but not assigned a value.
let emptyValue: null = null;
let notAssigned: undefined = undefined;

console.log(emptyValue, notAssigned);
2. Special Data Types
2.1 Any
Allows a variable to hold any type (not recommended for type safety).

let randomValue: any = 42;
randomValue = "Hello"; // No error
randomValue = true; // No error

console.log(randomValue);
2.2 Unknown
A safer alternative to any. The type must be determined before usage.

let unknownValue: unknown = "TypeScript";

if (typeof unknownValue === "string") {
  console.log(unknownValue.toUpperCase());
}
3. Object Types
3.1 Object
Represents a non-primitive value.

let person: object = { name: "Alice", age: 25 };

console.log(person);
3.2 Array
TypeScript supports typed arrays.

let numbers: number[] = [1, 2, 3, 4, 5];
let names: Array<string> = ["Alice", "Bob", "Charlie"];

console.log(numbers, names);
3.3 Tuple
A fixed-length array where each element has a specific type.

let user: [string, number] = ["Alice", 25];

console.log(user);
4. Advanced Types
4.1 Enum
Used to define a set of named constants.

enum Color {
  Red,
  Green,
  Blue,
}

let favoriteColor: Color = Color.Green;

console.log(favoriteColor); // Output: 1 (Index of Green)
4.2 Union Type
Allows a variable to have multiple types.

let value: string | number;
value = "Hello";
value = 42;

console.log(value);
4.3 Type Aliases
A custom name for a type.

type ID = string | number;
let userId: ID = "user123";

console.log(userId);
4.4 Intersection Type
Combines multiple types.

type Person = { name: string };
type Employee = { empId: number };

type Worker = Person & Employee;

let worker: Worker = { name: "John", empId: 101 };

console.log(worker);
4.5 Literal Types
Restricts a variable to a specific set of values.

let direction: "up" | "down";
direction = "up"; // Valid
// direction = "left"; // Error
4.6 Function Types
Type annotations for function parameters and return values.

function add(a: number, b: number): number {
  return a + b;
}

console.log(add(5, 3));
5. Special Utility Types
5.1 Void
Represents functions that do not return a value.

function logMessage(message: string): void {
  console.log(message);
}

logMessage("Hello TypeScript!");
5.2 Never
Represents a function that never returns.

function throwError(message: string): never {
  throw new Error(message);
}
5.3 Readonly
Prevents modifying object properties.

type User = {
  readonly id: number;
  name: string;
};

let user: User = { id: 1, name: "Alice" };
// user.id = 2; // Error: Cannot assign to 'id' because it is a read-only property.
5.4 Nullable Types
Allows null or undefined in a type.

let canBeNull: string | null = "Hello";
canBeNull = null; // Allowed


Loops and Control Structures in Typescript :

1. Introduction
Loops and control structures are fundamental concepts in TypeScript (and JavaScript) that allow us to control the flow of execution in a program.

2. Control Structures
Control structures in TypeScript include:

Conditional Statements (if, if-else, switch)
Looping Statements (for, while, do-while, for-in, for-of)
Exception Handling (try-catch-finally)
3. Conditional Statements
Conditional statements help execute a block of code based on conditions.

3.1 if Statement
let num: number = 10;
if (num > 0) {
    console.log("The number is positive.");
}
Output:

The number is positive.
3.2 if-else Statement
let age: number = 18;
if (age >= 18) {
    console.log("You are eligible to vote.");
} else {
    console.log("You are not eligible to vote.");
}
Output:

You are eligible to vote.
3.3 if-else-if Ladder
let marks: number = 75;
if (marks >= 90) {
    console.log("Grade: A");
} else if (marks >= 75) {
    console.log("Grade: B");
} else if (marks >= 50) {
    console.log("Grade: C");
} else {
    console.log("Fail");
}
Output:

Grade: B
3.4 switch Statement
let day: number = 2;
switch (day) {
    case 1:
        console.log("Monday");
        break;
    case 2:
        console.log("Tuesday");
        break;
    case 3:
        console.log("Wednesday");
        break;
    default:
        console.log("Invalid day");
}
Output:

Tuesday
4. Looping Statements
Loops allow executing a block of code multiple times.

4.1 for Loop
Used when the number of iterations is known.

for (let i = 1; i <= 5; i++) {
    console.log("Iteration:", i);
}
Output:

Iteration: 1
Iteration: 2
Iteration: 3
Iteration: 4
Iteration: 5

4.2 while Loop

Used when the number of iterations is not known beforehand.

let i: number = 1;
while (i <= 5) {
    console.log("Iteration:", i);
    i++;
}
Output:

Iteration: 1
Iteration: 2
Iteration: 3
Iteration: 4
Iteration: 5

4.3 do-while Loop

Executes at least once, even if the condition is false.

let j: number = 1;
do {
    console.log("Iteration:", j);
    j++;
} while (j <= 5);
Output:

Iteration: 1
Iteration: 2
Iteration: 3
Iteration: 4
Iteration: 5

4.4 for-in Loop (Used for Objects)

Iterates over object properties.

let student = { name: "John", age: 25, grade: "A" };
for (let key in student) {
    console.log(key + ": " + student[key]);
}

Output:

name: John
age: 25
grade: A

4.5 for-of Loop (Used for Arrays)

Iterates over iterable objects like arrays.

let numbers: number[] = [10, 20, 30, 40];
for (let num of numbers) {
    console.log(num);
}
Output:

10
20
30
40
5. Loop Control Statements
Used to modify the flow of loops.

5.1 break Statement
Terminates the loop early.

for (let i = 1; i <= 5; i++) {
    if (i === 3) {
        break;
    }
    console.log(i);
}
Output:

1
2
5.2 continue Statement
Skips the current iteration and moves to the next.

for (let i = 1; i <= 5; i++) {
    if (i === 3) {
        continue;
    }
    console.log(i);
}
Output:

1
2
4
5
6. Exception Handling (try-catch-finally)
Handles runtime errors gracefully.

try {
    let a: number = 10;
    let b: number = 0;
    let result = a / b;
    console.log(result);
} catch (error) {
    console.log("An error occurred:", error);
} finally {
    console.log("Execution completed.");
}
Output:

An error occurred: Error: Division by zero
Execution completed.
7. Summary
Conditional Statements: if, if-else, if-else-if, switch
Loops: for, while, do-while, for-in, for-of
Loop Control: break, continue
Exception Handling: try-catch-finally


Implementing OOP with Typescript :

TypeScript, being a superset of JavaScript, brings strong typing and object-oriented programming (OOP) features. OOP is based on four main principles:

Encapsulation
Abstraction
Inheritance
Polymorphism
Let's explore these concepts in detail with examples.

1. Classes and Objects
A class is a blueprint for creating objects. An object is an instance of a class.

Example 1: Creating a Class and an Object
class Person {
  name: string;
  age: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  greet(): void {
    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
  }
}

// Creating an object
const person1 = new Person("Alice", 30);
person1.greet(); // Output: Hello, my name is Alice and I am 30 years old.

2. Encapsulation

Encapsulation is restricting direct access to some data and methods inside a class.

Example 2: Using Access Modifiers (public, private, protected)

class BankAccount {
  private balance: number;

  constructor(initialBalance: number) {
    this.balance = initialBalance;
  }

  deposit(amount: number): void {
    this.balance += amount;
    console.log(`Deposited: ${amount}, New Balance: ${this.balance}`);
  }

  getBalance(): number {
    return this.balance;
  }
}

const account = new BankAccount(1000);
account.deposit(500);
console.log(account.getBalance()); // Output: 1500
// account.balance = 2000; // Error: Property 'balance' is private
üîπ private: Cannot be accessed outside the class.
üîπ protected: Can be accessed by subclasses.

3. Inheritance

Inheritance allows a class to inherit properties and methods from another class.

Example 3: Extending a Class
class Animal {
  constructor(public name: string) {}

  makeSound(): void {
    console.log("Some generic sound");
  }
}

class Dog extends Animal {
  constructor(name: string, public breed: string) {
    super(name);
  }

  makeSound(): void {
    console.log("Woof! Woof!");
  }
}

const dog = new Dog("Buddy", "Labrador");
dog.makeSound(); // Output: Woof! Woof!
console.log(dog.name, dog.breed); // Output: Buddy Labrador
4. Abstraction
Abstraction hides implementation details and only exposes essential functionalities.

Example 4: Abstract Class and Methods

abstract class Vehicle {
  constructor(public name: string) {}

  abstract startEngine(): void; // Abstract method
}

class Car extends Vehicle {
  startEngine(): void {
    console.log(`${this.name} engine started!`);
  }
}

const myCar = new Car("Toyota");
myCar.startEngine(); // Output: Toyota engine started!
üîπ Abstract methods must be implemented in derived classes.

5. Polymorphism

Polymorphism allows methods to take different forms.

Example 5: Method Overriding

class Shape {
  calculateArea(): number {
    return 0;
  }
}

class Circle extends Shape {
  constructor(public radius: number) {
    super();
  }

  calculateArea(): number {
    return Math.PI * this.radius * this.radius;
  }
}

const circle = new Circle(5);
console.log(circle.calculateArea()); // Output: 78.5398
üîπ The calculateArea() method behaves differently for Shape and Circle.

6. Interfaces in TypeScript
An interface defines a contract that classes must follow.

Example 6: Defining an Interface

interface Printable {
  print(): void;
}

class Document implements Printable {
  print(): void {
    console.log("Printing document...");
  }
}

const doc = new Document();
doc.print(); // Output: Printing document...
üîπ Interfaces define the structure but do not provide implementation.

7. Static Methods and Properties
Static members belong to the class, not the instance.

Example 7: Using Static Properties and Methods

class MathUtils {
  static PI: number = 3.14;

  static calculateCircleArea(radius: number): number {
    return this.PI * radius * radius;
  }
}

console.log(MathUtils.PI); // Output: 3.14
console.log(MathUtils.calculateCircleArea(10)); // Output: 314
8. Getters and Setters
Used to control access to properties.

Example 8: Getters and Setters
class User {
  private _password: string = "";

  get password(): string {
    return this._password.replace(/./g, "*"); // Masked password
  }

  set password(newPassword: string) {
    if (newPassword.length >= 6) {
      this._password = newPassword;
    } else {
      console.log("Password must be at least 6 characters long.");
    }
  }
}

const user = new User();
user.password = "abc"; // Invalid password
user.password = "secure123"; // Valid password
console.log(user.password); // Output: *********

9. Composition (Has-A Relationship)
A class can contain another class as a property.

Example 9: Composition

class Engine {
  constructor(public horsepower: number) {}

  start(): void {
    console.log(`Engine with ${this.horsepower} HP started!`);
  }
}

class Car {
  engine: Engine;

  constructor(public brand: string, horsepower: number) {
    this.engine = new Engine(horsepower);
  }

  startCar(): void {
    console.log(`${this.brand} car is starting...`);
    this.engine.start();
  }
}

const myCar = new Car("Tesla", 500);
myCar.startCar();
// Output: Tesla car is starting...
//         Engine with 500 HP started!
10. Using OOP with TypeScript in a Real-world Scenario
Example 10: User Authentication System
class User {
  constructor(public username: string, private password: string) {}

  validatePassword(password: string): boolean {
    return this.password === password;
  }
}

class AuthService {
  private users: User[] = [];

  register(username: string, password: string): void {
    const user = new User(username, password);
    this.users.push(user);
    console.log("User registered successfully.");
  }

  login(username: string, password: string): boolean {
    const user = this.users.find((u) => u.username === username);
    if (user && user.validatePassword(password)) {
      console.log("Login successful!");
      return true;
    }
    console.log("Invalid credentials.");
    return false;
  }
}

const auth = new AuthService();
auth.register("admin", "123456");
auth.login("admin", "123456"); // Output: Login successful!
auth.login("admin", "wrongpassword"); // Output: Invalid credentials.

